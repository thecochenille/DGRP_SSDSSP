phenogeno2$snp<-as.factor(phenogeno2$snp)
#head(phenogeno2) #use this to select which columns you need
phenogeno3<-phenogeno2[, c(5, 1, 3,10:21)]
#ADD if for model warning here
TC1<-tryCatch(anova(lmer(trait~snp*treatment+(treatment|line)+PC1+PC2+Infection.Status, phenogeno3)), error=function(e) e,warning=function(w) w)
TC2<-tryCatch(anova(lme(trait~snp*treatment+PC1+PC2+Infection.Status,random=(~1+treatment|line),na.omit(phenogeno3))),error=function(e) e, warning=function(w) w)
lengthlmer<-length(anova(lmer(trait~snp*treatment+(treatment|line)+PC1+PC2+Infection.Status, phenogeno3))[,6])
temp<-NULL
mac<-length(geno2[snp=="2"]$snp)
if(mac<5) {
c(allele,"low.MAC",rep(c(NA), each = lengthlmer+1))->temp # can I define already the number of NA I need to append?
} else {
if ( is( TC1, "error" ) || is( TC1,"warning" ) ) {
print("lme4 does not work!")
TC2
if (is (TC2, "error") || is(TC2, "warning") ) {
print("nlme does not work!")
c(allele, "error nlme", rep(c(NA), each = lengthlmer+1))->temp
} else {
c(allele, "nlme",TC2[,4]) -> temp
}
} else {
c(allele,"lme4",NA,TC1[,6])->temp
}
}
if (is.null(temp) == FALSE) {
rbind.data.frame(temp)->tempframe
names(tempframe)<-NULL
#print(tempframe)
write.table(tempframe,file="~/Downloads/output-testMarch242020.csv", append=T, sep=",")
}
#}
}
gwasnew<-function(snps)
for (allele in snps ) {
#for (i in 1:length(snps)){
#print(allele)
#print(i)
geno2<-snp.sub2[,c("line", allele), with=F] #taking out one snp from the list of snp2
colnames(geno2)<-c("line","snp")
phenogeno2<-data.table(ldply(unique(data3$poopscoop), function(x) data.frame(data3[poopscoop==x], geno2[line==unique(data3[poopscoop==x]$line)]$snp)))
colnames(phenogeno2)[length(colnames(phenogeno2))]<-"snp"
phenogeno2$line<-as.factor(phenogeno2$line)
phenogeno2$treatment<-as.factor(phenogeno2$treatment)
phenogeno2$snp<-as.factor(phenogeno2$snp)
#head(phenogeno2) #use this to select which columns you need
phenogeno3<-phenogeno2[, c(5, 1, 3,10:21)]
#ADD if for model warning here
TC1<-tryCatch(anova(lmer(trait~snp*treatment+(treatment|line)+PC1+PC2+Infection.Status, phenogeno3)), error=function(e) e,warning=function(w) w)
TC2<-tryCatch(anova(lme(trait~snp*treatment+PC1+PC2+Infection.Status,random=(~1+treatment|line),na.omit(phenogeno3))),error=function(e) e, warning=function(w) w)
lengthlmer<-length(anova(lmer(trait~snp*treatment+(treatment|line)+PC1+PC2+Infection.Status, phenogeno3))[,6])
temp<-NULL
mac<-length(geno2[snp=="2"]$snp)
if(mac<5) {
c(allele,"low.MAC",rep(c(NA), each = lengthlmer+1))->temp # can I define already the number of NA I need to append?
} else {
if ( is( TC1, "error" ) || is( TC1,"warning" ) ) {
print("lme4 does not work!")
TC2
if (is (TC2, "error") || is(TC2, "warning") ) {
print("nlme does not work!")
c(allele, "error nlme", rep(c(NA), each = lengthlmer+1))->temp
} else {
c(allele, "nlme",TC2[,4]) -> temp
}
} else {
c(allele,"lme4",NA,TC1[,6])->temp
}
}
if (is.null(temp) == FALSE) {
rbind.data.frame(temp)->tempframe
names(tempframe)<-NULL
#print(tempframe)
write.table(tempframe,file="~/Downloads/output-testMarch242020.csv", append=T, sep=",")
}
#}
}
#subset snps2
snps2<-colnames(snp.sub2)[2:length(colnames(snp.sub2))]
snps3<-sample(snps2, 10, replace=FALSE)
snps3
gwasnew(snps3)
gwasnew<-function(snps)
i<-1
for (allele in snps) {
#print(allele)
#print(i)
geno2<-snp.sub2[,c("line", allele), with=F] #taking out one snp from the list of snp2
colnames(geno2)<-c("line","snp")
phenogeno2<-data.table(ldply(unique(data3$poopscoop), function(x) data.frame(data3[poopscoop==x], geno2[line==unique(data3[poopscoop==x]$line)]$snp)))
colnames(phenogeno2)[length(colnames(phenogeno2))]<-"snp"
phenogeno2$line<-as.factor(phenogeno2$line)
phenogeno2$treatment<-as.factor(phenogeno2$treatment)
phenogeno2$snp<-as.factor(phenogeno2$snp)
#head(phenogeno2) #use this to select which columns you need
phenogeno3<-phenogeno2[, c(5, 1, 3,10:21)]
#ADD if for model warning here
TC1<-tryCatch(anova(lmer(trait~snp*treatment+(treatment|line)+PC1+PC2+Infection.Status, phenogeno3)), error=function(e) e,warning=function(w) w)
TC2<-tryCatch(anova(lme(trait~snp*treatment+PC1+PC2+Infection.Status,random=(~1+treatment|line),na.omit(phenogeno3))),error=function(e) e, warning=function(w) w)
lengthlmer<-length(anova(lmer(trait~snp*treatment+(treatment|line)+PC1+PC2+Infection.Status, phenogeno3))[,6])
temp<-NULL
mac<-length(geno2[snp=="2"]$snp)
if(mac<5) {
c(allele,"low.MAC",rep(c(NA), each = lengthlmer+1))->temp # can I define already the number of NA I need to append?
} else {
if ( is( TC1, "error" ) || is( TC1,"warning" ) ) {
print("lme4 does not work!")
TC2
if (is (TC2, "error") || is(TC2, "warning") ) {
print("nlme does not work!")
c(allele, "error nlme", rep(c(NA), each = lengthlmer+1))->temp
} else {
c(allele, "nlme",TC2[,4]) -> temp
}
} else {
c(allele,"lme4",NA,TC1[,6])->temp
}
}
if (is.null(temp) == FALSE) {
rbind.data.frame(temp)->tempframe
names(tempframe)<-NULL
#print(tempframe)
write.table(tempframe,file="~/Downloads/output-testMarch242020.csv", append=T, sep=",")
}
i<-i+1
progress(i)
}
snps3<-sample(snps2, 10, replace=FALSE)
snps3<-sample(snps2, 10, replace=FALSE)
snps3<-sample(snps2, 10, replace=FALSE)
snps3
gwasnew(snps3)
gwasnew(snps3)
gwasnew<-function(snps)
i<-1
for (allele in snps) {
#print(allele)
#print(i)
geno2<-snp.sub2[,c("line", allele), with=F] #taking out one snp from the list of snp2
colnames(geno2)<-c("line","snp")
phenogeno2<-data.table(ldply(unique(data3$poopscoop), function(x) data.frame(data3[poopscoop==x], geno2[line==unique(data3[poopscoop==x]$line)]$snp)))
colnames(phenogeno2)[length(colnames(phenogeno2))]<-"snp"
phenogeno2$line<-as.factor(phenogeno2$line)
phenogeno2$treatment<-as.factor(phenogeno2$treatment)
phenogeno2$snp<-as.factor(phenogeno2$snp)
#head(phenogeno2) #use this to select which columns you need
phenogeno3<-phenogeno2[, c(5, 1, 3,10:21)]
#ADD if for model warning here
TC1<-tryCatch(anova(lmer(trait~snp*treatment+(treatment|line)+PC1+PC2+Infection.Status, phenogeno3)), error=function(e) e,warning=function(w) w)
TC2<-tryCatch(anova(lme(trait~snp*treatment+PC1+PC2+Infection.Status,random=(~1+treatment|line),na.omit(phenogeno3))),error=function(e) e, warning=function(w) w)
lengthlmer<-length(anova(lmer(trait~snp*treatment+(treatment|line)+PC1+PC2+Infection.Status, phenogeno3))[,6])
temp<-NULL
mac<-length(geno2[snp=="2"]$snp)
if(mac<5) {
c(allele,"low.MAC",rep(c(NA), each = lengthlmer+1))->temp # can I define already the number of NA I need to append?
} else {
if ( is( TC1, "error" ) || is( TC1,"warning" ) ) {
print("lme4 does not work!")
TC2
if (is (TC2, "error") || is(TC2, "warning") ) {
print("nlme does not work!")
c(allele, "error nlme", rep(c(NA), each = lengthlmer+1))->temp
} else {
c(allele, "nlme",TC2[,4]) -> temp
}
} else {
c(allele,"lme4",NA,TC1[,6])->temp
}
}
if (is.null(temp) == FALSE) {
rbind.data.frame(temp)->tempframe
names(tempframe)<-NULL
#print(tempframe)
write.table(tempframe,file="~/Downloads/output-testMarch242020.csv", append=T, sep=",")
}
i<-i+1
progress(i)
}
gwasnew<-function(snps)
i<-1
for (allele in snps) {
#print(allele)
#print(i)
geno2<-snp.sub2[,c("line", allele), with=F] #taking out one snp from the list of snp2
colnames(geno2)<-c("line","snp")
phenogeno2<-data.table(ldply(unique(data3$poopscoop), function(x) data.frame(data3[poopscoop==x], geno2[line==unique(data3[poopscoop==x]$line)]$snp)))
colnames(phenogeno2)[length(colnames(phenogeno2))]<-"snp"
phenogeno2$line<-as.factor(phenogeno2$line)
phenogeno2$treatment<-as.factor(phenogeno2$treatment)
phenogeno2$snp<-as.factor(phenogeno2$snp)
#head(phenogeno2) #use this to select which columns you need
phenogeno3<-phenogeno2[, c(5, 1, 3,10:21)]
#ADD if for model warning here
TC1<-tryCatch(anova(lmer(trait~snp*treatment+(treatment|line)+PC1+PC2+Infection.Status, phenogeno3)), error=function(e) e,warning=function(w) w)
TC2<-tryCatch(anova(lme(trait~snp*treatment+PC1+PC2+Infection.Status,random=(~1+treatment|line),na.omit(phenogeno3))),error=function(e) e, warning=function(w) w)
lengthlmer<-length(anova(lmer(trait~snp*treatment+(treatment|line)+PC1+PC2+Infection.Status, phenogeno3))[,6])
temp<-NULL
mac<-length(geno2[snp=="2"]$snp)
if(mac<5) {
c(allele,"low.MAC",rep(c(NA), each = lengthlmer+1))->temp # can I define already the number of NA I need to append?
} else {
if ( is( TC1, "error" ) || is( TC1,"warning" ) ) {
print("lme4 does not work!")
TC2
if (is (TC2, "error") || is(TC2, "warning") ) {
print("nlme does not work!")
c(allele, "error nlme", rep(c(NA), each = lengthlmer+1))->temp
} else {
c(allele, "nlme",TC2[,4]) -> temp
}
} else {
c(allele,"lme4",NA,TC1[,6])->temp
}
}
if (is.null(temp) == FALSE) {
rbind.data.frame(temp)->tempframe
names(tempframe)<-NULL
#print(tempframe)
write.table(tempframe,file="~/Downloads/output-testMarch242020.csv", append=T, sep=",")
}
i<-i+1
progress(i)
}
snps3
gwasnew(snps3)
gwasnew<-function(snps)
#i<-1
for (allele in snps) {
#print(allele)
#print(i)
geno2<-snp.sub2[,c("line", allele), with=F] #taking out one snp from the list of snp2
colnames(geno2)<-c("line","snp")
phenogeno2<-data.table(ldply(unique(data3$poopscoop), function(x) data.frame(data3[poopscoop==x], geno2[line==unique(data3[poopscoop==x]$line)]$snp)))
colnames(phenogeno2)[length(colnames(phenogeno2))]<-"snp"
phenogeno2$line<-as.factor(phenogeno2$line)
phenogeno2$treatment<-as.factor(phenogeno2$treatment)
phenogeno2$snp<-as.factor(phenogeno2$snp)
#head(phenogeno2) #use this to select which columns you need
phenogeno3<-phenogeno2[, c(5, 1, 3,10:21)]
#ADD if for model warning here
TC1<-tryCatch(anova(lmer(trait~snp*treatment+(treatment|line)+PC1+PC2+Infection.Status, phenogeno3)), error=function(e) e,warning=function(w) w)
TC2<-tryCatch(anova(lme(trait~snp*treatment+PC1+PC2+Infection.Status,random=(~1+treatment|line),na.omit(phenogeno3))),error=function(e) e, warning=function(w) w)
lengthlmer<-length(anova(lmer(trait~snp*treatment+(treatment|line)+PC1+PC2+Infection.Status, phenogeno3))[,6])
temp<-NULL
mac<-length(geno2[snp=="2"]$snp)
if(mac<5) {
c(allele,"low.MAC",rep(c(NA), each = lengthlmer+1))->temp # can I define already the number of NA I need to append?
} else {
if ( is( TC1, "error" ) || is( TC1,"warning" ) ) {
print("lme4 does not work!")
TC2
if (is (TC2, "error") || is(TC2, "warning") ) {
print("nlme does not work!")
c(allele, "error nlme", rep(c(NA), each = lengthlmer+1))->temp
} else {
c(allele, "nlme",TC2[,4]) -> temp
}
} else {
c(allele,"lme4",NA,TC1[,6])->temp
}
}
if (is.null(temp) == FALSE) {
rbind.data.frame(temp)->tempframe
names(tempframe)<-NULL
#print(tempframe)
write.table(tempframe,file="~/Downloads/output-testMarch242020.csv", append=T, sep=",")
}
# i<-i+1
#progress(i)
}
snps3<-sample(snps2, 10, replace=FALSE)
snps3
gwasnew(snps3)
gwasnew<-function(snps)
i<-1
for (allele in snps) {
#print(allele)
#print(i)
geno2<-snp.sub2[,c("line", allele), with=F] #taking out one snp from the list of snp2
colnames(geno2)<-c("line","snp")
phenogeno2<-data.table(ldply(unique(data3$poopscoop), function(x) data.frame(data3[poopscoop==x], geno2[line==unique(data3[poopscoop==x]$line)]$snp)))
colnames(phenogeno2)[length(colnames(phenogeno2))]<-"snp"
phenogeno2$line<-as.factor(phenogeno2$line)
phenogeno2$treatment<-as.factor(phenogeno2$treatment)
phenogeno2$snp<-as.factor(phenogeno2$snp)
#head(phenogeno2) #use this to select which columns you need
phenogeno3<-phenogeno2[, c(5, 1, 3,10:21)]
#ADD if for model warning here
TC1<-tryCatch(anova(lmer(trait~snp*treatment+(treatment|line)+PC1+PC2+Infection.Status, phenogeno3)), error=function(e) e,warning=function(w) w)
TC2<-tryCatch(anova(lme(trait~snp*treatment+PC1+PC2+Infection.Status,random=(~1+treatment|line),na.omit(phenogeno3))),error=function(e) e, warning=function(w) w)
lengthlmer<-length(anova(lmer(trait~snp*treatment+(treatment|line)+PC1+PC2+Infection.Status, phenogeno3))[,6])
temp<-NULL
mac<-length(geno2[snp=="2"]$snp)
if(mac<5) {
c(allele,"low.MAC",rep(c(NA), each = lengthlmer+1))->temp # can I define already the number of NA I need to append?
} else {
if ( is( TC1, "error" ) || is( TC1,"warning" ) ) {
print("lme4 does not work!")
TC2
if (is (TC2, "error") || is(TC2, "warning") ) {
print("nlme does not work!")
c(allele, "error nlme", rep(c(NA), each = lengthlmer+1))->temp
} else {
c(allele, "nlme",TC2[,4]) -> temp
}
} else {
c(allele,"lme4",NA,TC1[,6])->temp
}
}
if (is.null(temp) == FALSE) {
rbind.data.frame(temp)->tempframe
names(tempframe)<-NULL
#print(tempframe)
write.table(tempframe,file="~/Downloads/output-testMarch242020.csv", append=T, sep=",")
}
# i<-i+1
#progress(i)
}
gwasnew<-function(snps, i)
for (allele in snps) {
#print(allele)
#print(i)
geno2<-snp.sub2[,c("line", allele), with=F] #taking out one snp from the list of snp2
colnames(geno2)<-c("line","snp")
phenogeno2<-data.table(ldply(unique(data3$poopscoop), function(x) data.frame(data3[poopscoop==x], geno2[line==unique(data3[poopscoop==x]$line)]$snp)))
colnames(phenogeno2)[length(colnames(phenogeno2))]<-"snp"
phenogeno2$line<-as.factor(phenogeno2$line)
phenogeno2$treatment<-as.factor(phenogeno2$treatment)
phenogeno2$snp<-as.factor(phenogeno2$snp)
#head(phenogeno2) #use this to select which columns you need
phenogeno3<-phenogeno2[, c(5, 1, 3,10:21)]
#ADD if for model warning here
TC1<-tryCatch(anova(lmer(trait~snp*treatment+(treatment|line)+PC1+PC2+Infection.Status, phenogeno3)), error=function(e) e,warning=function(w) w)
TC2<-tryCatch(anova(lme(trait~snp*treatment+PC1+PC2+Infection.Status,random=(~1+treatment|line),na.omit(phenogeno3))),error=function(e) e, warning=function(w) w)
lengthlmer<-length(anova(lmer(trait~snp*treatment+(treatment|line)+PC1+PC2+Infection.Status, phenogeno3))[,6])
temp<-NULL
mac<-length(geno2[snp=="2"]$snp)
if(mac<5) {
c(allele,"low.MAC",rep(c(NA), each = lengthlmer+1))->temp # can I define already the number of NA I need to append?
} else {
if ( is( TC1, "error" ) || is( TC1,"warning" ) ) {
print("lme4 does not work!")
TC2
if (is (TC2, "error") || is(TC2, "warning") ) {
print("nlme does not work!")
c(allele, "error nlme", rep(c(NA), each = lengthlmer+1))->temp
} else {
c(allele, "nlme",TC2[,4]) -> temp
}
} else {
c(allele,"lme4",NA,TC1[,6])->temp
}
}
if (is.null(temp) == FALSE) {
rbind.data.frame(temp)->tempframe
names(tempframe)<-NULL
#print(tempframe)
write.table(tempframe,file="~/Downloads/output-testMarch242020.csv", append=T, sep=",")
}
i<-i+1
progress(i)
}
gwasnew(snps3,1)
snps3<-sample(snps2, 10, replace=FALSE)
snps3
gwasnew(snps3,1)
read.csv("Downloads/Austin_April2020_noOutlier.csv")->df
head(df)
names(df)
#changing lineage and day of starvation as character
df$Clineage<-as.character(df$lineage)
df$Cday_of_starvation<-as.character(df$day_of_starvation)
typeof(df$lineage)
typeof(df$Clineage)
#wing plot
dfplot<- ggplot(df,aes(x=as.factor(day_of_starvation),y=lnwing)) +
geom_boxplot(width=0.5, size=0.2, outlier.size = 0.1, aes(fill=sex)) +
geom_jitter(aes(color=sex),position=position_jitterdodge(dodge.width=0.5,jitter.width = 0),size=0.5) +
theme_classic(base_size = 12) +
#scale_fill_manual(name="", # Legend label, use darker colors
#breaks=c("Virgin methanol", "Mated","JHM"),
#labels=c("A","B", "C"),
#values=c("#2E9FDF","#FF0000","#E7B800")) +
scale_color_manual(values =c("black","black")) +
theme(strip.background=element_rect(fill="black"))+
theme(strip.text=element_text(color="white", face="bold"))+
facet_wrap(. ~ Clineage)
require(ggplot2)
require(car)
require(reshape2)
require(data.table)
require(plyr)
require(lme4)
require(lmerTest)
require(nlme)
require(stringr)
require(afex) #allows to retrieve p-values from lm4 function
require(stringr)
require(tidyr)
require(qqman)
require(tibble)
#devtools::install_github("variani/lme4qtl")
#require(lme4qtl)
require(lattice)
require(snow)
require(Rmpi)
require(ggfortify)
require(rapport)
require(pbapply)
require(svMisc)
#wing plot
dfplot<- ggplot(df,aes(x=as.factor(day_of_starvation),y=lnwing)) +
geom_boxplot(width=0.5, size=0.2, outlier.size = 0.1, aes(fill=sex)) +
geom_jitter(aes(color=sex),position=position_jitterdodge(dodge.width=0.5,jitter.width = 0),size=0.5) +
theme_classic(base_size = 12) +
#scale_fill_manual(name="", # Legend label, use darker colors
#breaks=c("Virgin methanol", "Mated","JHM"),
#labels=c("A","B", "C"),
#values=c("#2E9FDF","#FF0000","#E7B800")) +
scale_color_manual(values =c("black","black")) +
theme(strip.background=element_rect(fill="black"))+
theme(strip.text=element_text(color="white", face="bold"))+
facet_wrap(. ~ Clineage)
dfplot
names(df)
head(df)
lm2<-lm(lnleg ~ sex * Cday_of_starvation * Clineage, data = df)
lm1<-lm(lnwing ~ sex * Cday_of_starvation * Clineage, data = df)
setwd("/Users/isabelle/Dropbox/_Github_reps/DGRP_SSDSSP/")
df<-read.csv("/Users/isabelle/Dropbox/_Github_reps/DGRP_SSDSSP/Sept2020/DGRPfinal.csv")
head(df)
names(df)
#changing lineage and day of starvation as character
df$Cline<-as.character(df$line)
df$Cday_of_starvation<-as.character(df$day_of_starvation)
typeof(df$line)
typeof(df$Cline)
#subset experiment flies
df<-subset(df, df$control_experiment == 'EXPERIMENT')
head(df)
head(df)
t.test(df$lnpupa ~ df$sex)
head(df)
#SSD 0
SSD0<-subset(df, df$day_of_starvation ==0)
t.test(SSD0$lnpupa ~ SSD0$sex)
names(df)
head(df)
lm1<-lm(lnwing ~ sex * Cday_of_starvation * Cline, data = df)
setwd("/Users/isabelle/Dropbox/_Github_reps/DGRP_SSDSSP/")
df<-read.csv("/Users/isabelle/Dropbox/_Github_reps/DGRP_SSDSSP/Sept2020/DGRPfinal_clean.csv")
head(df)
names(df)
#changing lineage and day of starvation as character
df$Cline<-as.character(df$line)
df$Cday_of_starvation<-as.character(df$day_of_starvation)
typeof(df$line)
typeof(df$Cline)
head(df)
#subset experiment flies
df<-subset(df, df$control_experiment == 'EXPERIMENT')
head(df)
head(df)
t.test(df$lnpupa ~ df$sex)
f<-subset(df, df$sex == 'F')
m<-subset(df, df$sex == 'M')
summary(f$lnpupa) #mean 14.45
summary(m$lnpupa) #mean 14.38
#SSD 0
SSD0<-subset(df, df$day_of_starvation ==0)
t.test(SSD0$lnpupa ~ SSD0$sex)
SSD1<-subset(df, df$day_of_starvation ==1)
t.test(SSD1$lnpupa ~ SSD1$sex)
SSD2<-subset(df, df$day_of_starvation ==2)
t.test(SSD2$lnpupa ~ SSD2$sex)
df_exp_F_mean<-read.csv("/Users/isabelle/Dropbox/_Github_reps/DGRP_SSDSSP/Sept2020/df_exp_F_mean.csv")
head(df_exp_F_mean)
f<-subset(df, df$sex == 'F')
lmFline<-lm(lnpupa ~ Cline, data = f)
Anova(lmFline)
require(ggplot2)
require(car)
require(reshape2)
require(data.table)
require(plyr)
require(lme4)
require(lmerTest)
require(nlme)
require(stringr)
require(afex) #allows to retrieve p-values from lm4 function
require(stringr)
require(tidyr)
require(qqman)
require(tibble)
#devtools::install_github("variani/lme4qtl")
#require(lme4qtl)
require(lattice)
require(snow)
require(Rmpi)
require(ggfortify)
require(rapport)
require(pbapply)
require(svMisc)
lmFline<-lm(lnpupa ~ Cline, data = f)
Anova(lmFline)
SSPSSD<-read.csv(("SSP01_SSD_Aug032020.csv"))
install.packages("lmerTest")
model1<-lmer(lnpupa~sex+(1|line))
require(stringr)
model1<-lmer(lnpupa~sex+(1|line))
install.packages("~/Downloads/pbkrtest_0.4-8.6.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/pbkrtest_0.4-8.6.tar.gz", repos = NULL, type = "source")
